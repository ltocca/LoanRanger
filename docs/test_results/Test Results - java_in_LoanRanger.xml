<?xml version="1.0" encoding="UTF-8"?>
<testrun duration="7187" footerText="Generated by IntelliJ IDEA on 13/10/25, 15:30" name="java in LoanRanger">
    <count name="total" value="253"/>
    <count name="passed" value="253"/>
    <config nameIsGenerated="true" configId="JUnit" name="java in LoanRanger">
        <module name="LoanRanger"/>
        <option name="TEST_OBJECT" value="directory"/>
        <dir value="/home/leonardo/Documenti/Uni/Progetto/LoanRanger/src/test/java"/>
        <method v="2">
            <option name="Make" enabled="true"/>
        </method>
    </config>
    <root name="&lt;default package&gt;" location="java:suite://&lt;default package&gt;">
        <output type="stdout">/usr/lib/jvm/openjdk-liberica-full-bin/bin/java
            -javaagent:/home/leonardo/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/plugins/java/lib/rt/debugger-agent.jar=file:///tmp/capture13355453349315742629.props
            -ea -Didea.test.cyclic.buffer.size=1048576
            -javaagent:/home/leonardo/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/lib/idea_rt.jar=46573
            -Dkotlinx.coroutines.debug.enable.creation.stack.trace=false -Ddebugger.agent.enable.coroutines=true
            -Dkotlinx.coroutines.debug.enable.flows.stack.trace=true
            -Dkotlinx.coroutines.debug.enable.mutable.state.flows.stack.trace=true -Dfile.encoding=UTF-8
            -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath
            /home/leonardo/.m2/repository/org/junit/platform/junit-platform-launcher/1.12.2/junit-platform-launcher-1.12.2.jar:/home/leonardo/.m2/repository/org/junit/vintage/junit-vintage-engine/5.12.2/junit-vintage-engine-5.12.2.jar:/home/leonardo/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/lib/idea_rt.jar:/home/leonardo/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/plugins/junit/lib/junit5-rt.jar:/home/leonardo/.local/share/JetBrains/Toolbox/apps/intellij-idea-ultimate/plugins/junit/lib/junit-rt.jar:/home/leonardo/Documenti/Uni/Progetto/LoanRanger/target/test-classes:/home/leonardo/Documenti/Uni/Progetto/LoanRanger/target/classes:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/3.5.5/spring-boot-starter-jdbc-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-starter/3.5.5/spring-boot-starter-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot/3.5.5/spring-boot-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.5.5/spring-boot-autoconfigure-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.5.5/spring-boot-starter-logging-3.5.5.jar:/home/leonardo/.m2/repository/ch/qos/logback/logback-classic/1.5.18/logback-classic-1.5.18.jar:/home/leonardo/.m2/repository/ch/qos/logback/logback-core/1.5.18/logback-core-1.5.18.jar:/home/leonardo/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/home/leonardo/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/home/leonardo/.m2/repository/org/slf4j/jul-to-slf4j/2.0.17/jul-to-slf4j-2.0.17.jar:/home/leonardo/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/home/leonardo/.m2/repository/org/yaml/snakeyaml/2.4/snakeyaml-2.4.jar:/home/leonardo/.m2/repository/org/springframework/spring-jdbc/6.2.10/spring-jdbc-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-beans/6.2.10/spring-beans-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-tx/6.2.10/spring-tx-6.2.10.jar:/home/leonardo/.m2/repository/org/postgresql/postgresql/42.7.7/postgresql-42.7.7.jar:/home/leonardo/.m2/repository/org/checkerframework/checker-qual/3.49.3/checker-qual-3.49.3.jar:/home/leonardo/.m2/repository/org/projectlombok/lombok/1.18.38/lombok-1.18.38.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.5.6/spring-boot-starter-test-3.5.6.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-test/3.5.5/spring-boot-test-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.5.5/spring-boot-test-autoconfigure-3.5.5.jar:/home/leonardo/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/home/leonardo/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/home/leonardo/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/home/leonardo/.m2/repository/net/minidev/json-smart/2.5.2/json-smart-2.5.2.jar:/home/leonardo/.m2/repository/net/minidev/accessors-smart/2.5.2/accessors-smart-2.5.2.jar:/home/leonardo/.m2/repository/org/ow2/asm/asm/9.7.1/asm-9.7.1.jar:/home/leonardo/.m2/repository/org/assertj/assertj-core/3.27.4/assertj-core-3.27.4.jar:/home/leonardo/.m2/repository/net/bytebuddy/byte-buddy/1.17.7/byte-buddy-1.17.7.jar:/home/leonardo/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/home/leonardo/.m2/repository/org/hamcrest/hamcrest/3.0/hamcrest-3.0.jar:/home/leonardo/.m2/repository/org/mockito/mockito-core/5.17.0/mockito-core-5.17.0.jar:/home/leonardo/.m2/repository/net/bytebuddy/byte-buddy-agent/1.17.7/byte-buddy-agent-1.17.7.jar:/home/leonardo/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/leonardo/.m2/repository/org/mockito/mockito-junit-jupiter/5.17.0/mockito-junit-jupiter-5.17.0.jar:/home/leonardo/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/home/leonardo/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/home/leonardo/.m2/repository/org/springframework/spring-core/6.2.10/spring-core-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-jcl/6.2.10/spring-jcl-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-test/6.2.10/spring-test-6.2.10.jar:/home/leonardo/.m2/repository/org/xmlunit/xmlunit-core/2.10.3/xmlunit-core-2.10.3.jar:/home/leonardo/.m2/repository/org/springframework/security/spring-security-crypto/6.5.3/spring-security-crypto-6.5.3.jar:/home/leonardo/.m2/repository/org/jetbrains/annotations/13.0/annotations-13.0.jar:/home/leonardo/.m2/repository/com/sun/mail/jakarta.mail/2.0.2/jakarta.mail-2.0.2.jar:/home/leonardo/.m2/repository/com/sun/activation/jakarta.activation/2.0.1/jakarta.activation-2.0.1.jar:/home/leonardo/.m2/repository/com/zaxxer/HikariCP/6.3.2/HikariCP-6.3.2.jar:/home/leonardo/.m2/repository/org/slf4j/slf4j-api/2.0.17/slf4j-api-2.0.17.jar:/home/leonardo/.m2/repository/org/springframework/boot/spring-boot-starter-mail/3.5.5/spring-boot-starter-mail-3.5.5.jar:/home/leonardo/.m2/repository/org/springframework/spring-context-support/6.2.10/spring-context-support-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-context/6.2.10/spring-context-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-aop/6.2.10/spring-aop-6.2.10.jar:/home/leonardo/.m2/repository/org/springframework/spring-expression/6.2.10/spring-expression-6.2.10.jar:/home/leonardo/.m2/repository/io/micrometer/micrometer-observation/1.15.3/micrometer-observation-1.15.3.jar:/home/leonardo/.m2/repository/io/micrometer/micrometer-commons/1.15.3/micrometer-commons-1.15.3.jar:/home/leonardo/.m2/repository/org/eclipse/angus/jakarta.mail/2.0.4/jakarta.mail-2.0.4.jar:/home/leonardo/.m2/repository/org/eclipse/angus/angus-activation/2.0.2/angus-activation-2.0.2.jar:/home/leonardo/.m2/repository/org/junit/jupiter/junit-jupiter/5.8.1/junit-jupiter-5.8.1.jar:/home/leonardo/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.12.2/junit-jupiter-api-5.12.2.jar:/home/leonardo/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/leonardo/.m2/repository/org/junit/platform/junit-platform-commons/1.12.2/junit-platform-commons-1.12.2.jar:/home/leonardo/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/leonardo/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.12.2/junit-jupiter-params-5.12.2.jar:/home/leonardo/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.12.2/junit-jupiter-engine-5.12.2.jar:/home/leonardo/.m2/repository/org/junit/platform/junit-platform-engine/1.12.2/junit-platform-engine-1.12.2.jar:/home/leonardo/.m2/repository/org/testcontainers/testcontainers/1.21.3/testcontainers-1.21.3.jar:/home/leonardo/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/leonardo/.m2/repository/org/hamcrest/hamcrest-core/3.0/hamcrest-core-3.0.jar:/home/leonardo/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/home/leonardo/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/home/leonardo/.m2/repository/com/github/docker-java/docker-java-api/3.4.2/docker-java-api-3.4.2.jar:/home/leonardo/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.19.2/jackson-annotations-2.19.2.jar:/home/leonardo/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.4.2/docker-java-transport-zerodep-3.4.2.jar:/home/leonardo/.m2/repository/com/github/docker-java/docker-java-transport/3.4.2/docker-java-transport-3.4.2.jar:/home/leonardo/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/home/leonardo/.m2/repository/org/testcontainers/jdbc/1.21.3/jdbc-1.21.3.jar:/home/leonardo/.m2/repository/org/testcontainers/database-commons/1.21.3/database-commons-1.21.3.jar:/home/leonardo/.m2/repository/org/testcontainers/junit-jupiter/1.21.3/junit-jupiter-1.21.3.jar:/home/leonardo/.m2/repository/org/testcontainers/postgresql/1.21.3/postgresql-1.21.3.jar:/home/leonardo/.m2/repository/com/icegreen/greenmail-junit5/2.1.7/greenmail-junit5-2.1.7.jar:/home/leonardo/.m2/repository/com/icegreen/greenmail/2.1.7/greenmail-2.1.7.jar:/home/leonardo/.m2/repository/jakarta/mail/jakarta.mail-api/2.1.3/jakarta.mail-api-2.1.3.jar
            com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit5 @w@/tmp/idea_working_dirs_junit.tmp
            @/tmp/idea_junit.tmp -socket36463
        </output>
        <output type="stdout">2025-10-13T15:29:19.446+02:00 INFO 5991 --- [LoanRanger] [ionShutdownHook]
            com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown initiated...
            2025-10-13T15:29:19.447+02:00 INFO 5991 --- [LoanRanger] [ionShutdownHook]
            com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Shutdown completed.
            2025-10-13T15:29:19.448+02:00 INFO 5991 --- [LoanRanger] [ionShutdownHook]
            com.zaxxer.hikari.HikariDataSource : HikariPool-2 - Shutdown initiated...
            2025-10-13T15:29:19.450+02:00 INFO 5991 --- [LoanRanger] [ionShutdownHook]
            com.zaxxer.hikari.HikariDataSource : HikariPool-2 - Shutdown completed.
        </output>
        <output type="stdout">Process finished with exit code 0
        </output>
    </root>
    <suite duration="591" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.AdminAccountControllerTest"
           name="AdminAccountControllerTest" status="passed">
        <test duration="577"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminAccountControllerTest/changeEmail_whenNewEmailIsSameAsOld_throwsIllegalArgumentException"
              name="changeEmail_whenNewEmailIsSameAsOld_throwsIllegalArgumentException()" metainfo="" status="passed">
            <output type="stderr">Mockito is currently self-attaching to enable the inline-mock-maker. This will no
                longer work in future releases of the JDK. Please add Mockito as an agent to your build as described in
                Mockito's documentation:
                https://javadoc.io/doc/org.mockito/mockito-core/latest/org.mockito/org/mockito/Mockito.html#0.3
                WARNING: A Java agent has been loaded dynamically
                (/home/leonardo/.m2/repository/net/bytebuddy/byte-buddy-agent/1.17.7/byte-buddy-agent-1.17.7.jar)
                WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this
                warning
                WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more
                information
                WARNING: Dynamic loading of agents will be disallowed by default in a future release
                OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap
                classpath has been appended
            </output>
        </test>
        <test duration="10"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminAccountControllerTest/changeEmail_whenNewEmailIsValidAndAvailable_updatesSuccessfully"
              name="changeEmail_whenNewEmailIsValidAndAvailable_updatesSuccessfully()" metainfo="" status="passed"/>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminAccountControllerTest/changeEmail_whenNewEmailIsInvalidFormat_throwsIllegalArgumentException"
              name="changeEmail_whenNewEmailIsInvalidFormat_throwsIllegalArgumentException()" metainfo=""
              status="passed"/>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminAccountControllerTest/changeEmail_whenEmailIsAlreadyTaken_throwsIllegalArgumentException"
              name="changeEmail_whenEmailIsAlreadyTaken_throwsIllegalArgumentException()" metainfo="" status="passed"/>
    </suite>
    <suite duration="619" locationUrl="java:suite://dev.ltocca.loanranger.ORM.UserDAOTest" name="UserDAOTest"
           status="passed">
        <test duration="175"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/updateUser_ShouldUpdateUserInformation"
              name="updateUser_ShouldUpdateUserInformation()" metainfo="" status="passed">
            <output type="stdout">2025-10-13T15:29:10.896+02:00 INFO 5991 --- [LoanRanger] [ main]
                com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting...
                2025-10-13T15:29:10.997+02:00 INFO 5991 --- [LoanRanger] [ main] com.zaxxer.hikari.pool.HikariPool :
                HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4888425d
                2025-10-13T15:29:10.998+02:00 INFO 5991 --- [LoanRanger] [ main] com.zaxxer.hikari.HikariDataSource :
                HikariPool-1 - Start completed.
                Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="41"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/getUserById_ShouldReturnUserWhenExists"
              name="getUserById_ShouldReturnUserWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="41"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/updatePassword_ShouldChangeUserPassword"
              name="updatePassword_ShouldChangeUserPassword()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="43"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/createUser_ShouldThrowExceptionForDuplicateEmail"
              name="createUser_ShouldThrowExceptionForDuplicateEmail()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/getUserById_ShouldReturnEmptyWhenUserNotFound"
              name="getUserById_ShouldReturnEmptyWhenUserNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="46"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/getAllUsers_ShouldReturnAllUsers"
              name="getAllUsers_ShouldReturnAllUsers()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/getUserByEmail_ShouldReturnUserWhenEmailExists"
              name="getUserByEmail_ShouldReturnUserWhenEmailExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/createUser_ShouldCreateAdminSuccessfully"
              name="createUser_ShouldCreateAdminSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/deleteUser_ShouldRemoveUserFromDatabase"
              name="deleteUser_ShouldRemoveUserFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="44"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/createUser_ShouldCreateMemberSuccessfully"
              name="createUser_ShouldCreateMemberSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/getUserByUsername_ShouldReturnUserWhenUsernameExists"
              name="getUserByUsername_ShouldReturnUserWhenUsernameExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.UserDAOTest/createUser_ShouldCreateLibrarianWithLibrary"
              name="createUser_ShouldCreateLibrarianWithLibrary()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
    <suite duration="222" locationUrl="java:suite://dev.ltocca.loanranger.ORM.BookCopiesDAOTest"
           name="BookCopiesDAOTest" status="passed">
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookCopiesDAOTest/getCopyById_ShouldReturnBookCopyWhenExists"
              name="getCopyById_ShouldReturnBookCopyWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="46"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookCopiesDAOTest/searchByTitle_ShouldReturnMatchingCopies"
              name="searchByTitle_ShouldReturnMatchingCopies()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookCopiesDAOTest/getCopyById_ShouldReturnEmptyWhenBookCopyNotFound"
              name="getCopyById_ShouldReturnEmptyWhenBookCopyNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="41"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookCopiesDAOTest/createCopy_ShouldCreateBookCopySuccessfully"
              name="createCopy_ShouldCreateBookCopySuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookCopiesDAOTest/getAllBookCopies_ShouldReturnAllCopies"
              name="getAllBookCopies_ShouldReturnAllCopies()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
    <suite duration="951" locationUrl="java:suite://dev.ltocca.loanranger.util.PasswordHasherTest"
           name="PasswordHasherTest" status="passed">
        <test duration="118"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withCorrectPassword_returnsTrue"
              name="check_withCorrectPassword_returnsTrue()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/hash_returnsValidBcryptHash"
              name="hash_returnsValidBcryptHash()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/hash_withEmptyPassword_returnsValidHash"
              name="hash_withEmptyPassword_returnsValidHash()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/hash_withSpecialCharacters_returnsValidHash"
              name="hash_withSpecialCharacters_returnsValidHash()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withBothEmpty_returnsFalse"
              name="check_withBothEmpty_returnsFalse()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withPreviouslyHashedPassword_stillWorks"
              name="check_withPreviouslyHashedPassword_stillWorks()" metainfo="" status="passed">
            <output type="stdout">2025-10-13T15:29:12.220+02:00 WARN 5991 --- [LoanRanger] [ main]
                o.s.s.c.bcrypt.BCryptPasswordEncoder : Encoded password does not look like BCrypt
            </output>
        </test>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withEmptyPlainText_returnsFalse"
              name="check_withEmptyPlainText_returnsFalse()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withIncorrectPassword_returnsFalse"
              name="check_withIncorrectPassword_returnsFalse()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withEmptyHashedText_returnsFalse"
              name="check_withEmptyHashedText_returnsFalse()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withBothNull_returnsFalse"
              name="check_withBothNull_returnsFalse()" metainfo="" status="passed"/>
        <test duration="223"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/hash_consistentlyProducesDifferentHashesForSamePassword"
              name="hash_consistentlyProducesDifferentHashesForSamePassword()" metainfo="" status="passed"/>
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withNullPlainText_returnsFalse"
              name="check_withNullPlainText_returnsFalse()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.util.PasswordHasherTest/check_withNullHashedText_returnsFalse"
              name="check_withNullHashedText_returnsFalse()" metainfo="" status="passed"/>
    </suite>
    <suite duration="611" locationUrl="java:suite://dev.ltocca.loanranger.ORM.LibraryDAOTest" name="LibraryDAOTest"
           status="passed">
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/updateLibrary_ShouldUpdateAllFields"
              name="updateLibrary_ShouldUpdateAllFields()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/getAllLibraries_ShouldReturnAllLibraries"
              name="getAllLibraries_ShouldReturnAllLibraries()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/createMultipleLibraries_ShouldGenerateUniqueIds"
              name="createMultipleLibraries_ShouldGenerateUniqueIds()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/findLibrariesByName_ShouldReturnMatchingLibraries"
              name="findLibrariesByName_ShouldReturnMatchingLibraries()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/getLibraryById_ShouldReturnLibraryWhenExists"
              name="getLibraryById_ShouldReturnLibraryWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/updateNonExistentLibrary_ShouldNotThrowException"
              name="updateNonExistentLibrary_ShouldNotThrowException()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/getAllLibraries_ShouldReturnEmptyListWhenNoLibraries"
              name="getAllLibraries_ShouldReturnEmptyListWhenNoLibraries()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/findLibrariesByNameWithPartialMatch_ShouldReturnResults"
              name="findLibrariesByNameWithPartialMatch_ShouldReturnResults()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/findLibrariesByName_ShouldBeCaseInsensitive"
              name="findLibrariesByName_ShouldBeCaseInsensitive()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/createLibraryWithMinimumRequiredFields_ShouldSucceed"
              name="createLibraryWithMinimumRequiredFields_ShouldSucceed()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/deleteLibrary_ShouldRemoveLibraryFromDatabase"
              name="deleteLibrary_ShouldRemoveLibraryFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/findLibrariesByName_ShouldReturnEmptyListWhenNoMatches"
              name="findLibrariesByName_ShouldReturnEmptyListWhenNoMatches()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/deleteLibraryByObject_ShouldRemoveLibraryFromDatabase"
              name="deleteLibraryByObject_ShouldRemoveLibraryFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/updateLibrary_ShouldUpdatePartialFields"
              name="updateLibrary_ShouldUpdatePartialFields()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/deleteNonExistentLibrary_ShouldNotThrowException"
              name="deleteNonExistentLibrary_ShouldNotThrowException()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/getLibraryById_ShouldReturnEmptyWhenLibraryNotFound"
              name="getLibraryById_ShouldReturnEmptyWhenLibraryNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LibraryDAOTest/createLibrary_ShouldCreateLibrarySuccessfully"
              name="createLibrary_ShouldCreateLibrarySuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
    <suite duration="156" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.LibraryFacadeTest"
           name="LibraryFacadeTest" status="passed">
        <test duration="152"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibraryFacadeTest/returnBook_whenLoanExists_updatesLoanAndProcessesWaitingList"
              name="returnBook_whenLoanExists_updatesLoanAndProcessesWaitingList()" metainfo="" status="passed">
            <output type="stdout">Book is available. Loaning...
                Book returned successfully.
                Book copy 101 returned. Processing next steps...
                Book is available. Reserving...
                Book copy 101 automatically reserved for member jane.doe from the waiting list.
                Book Copy Available - Clean Code
                Dear Jane Doe,
                The book 'Clean Code' by Robert C. Martin (Copy ID: 101) that you reserved is now available.
                Please visit the library Main Library soon to borrow it!
            </output>
        </test>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibraryFacadeTest/borrowBook_whenCopyIsAvailable_createsLoanAndUpdatesState"
              name="borrowBook_whenCopyIsAvailable_createsLoanAndUpdatesState()" metainfo="" status="passed">
            <output type="stdout">Book is available. Loaning...
                Book copy 101 loaned to member john.smith
            </output>
        </test>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibraryFacadeTest/returnBook_withNoWaitingList_makesCopyAvailable"
              name="returnBook_withNoWaitingList_makesCopyAvailable()" metainfo="" status="passed">
            <output type="stdout">Book is available. Loaning...
                Book returned successfully.
                Book copy 101 returned. Processing next steps...
            </output>
            <output type="stderr">Error: The copy is already available.
            </output>
            <output type="stdout">Book copy 101 is now available.
            </output>
        </test>
    </suite>
    <suite duration="55" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest"
           name="AdminUsersControllerTest" status="passed">
        <test duration="43"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/deleteUser_whenDeletingSelf_failsDeletion"
              name="deleteUser_whenDeletingSelf_failsDeletion()" metainfo="" status="passed">
            <output type="stderr">Cannot delete your own admin account.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/assignLibrarianToLibrary_withValidIds_updatesSuccessfully"
              name="assignLibrarianToLibrary_withValidIds_updatesSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Librarian 2 assigned to new library 1
            </output>
        </test>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/registerNewLibrarian_whenLibraryExists_registersUser"
              name="registerNewLibrarian_whenLibraryExists_registersUser()" metainfo="" status="passed">
            <output type="stdout">Librarian 'newlib' registered successfully.
            </output>
        </test>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/registerNewLibrarian_forNonExistentLibrary_failsRegistration"
              name="registerNewLibrarian_forNonExistentLibrary_failsRegistration()" metainfo="" status="passed">
            <output type="stderr">Cannot register librarian: Library with ID 999 not found.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/assignLibrarian_toNonExistentLibrary_failsAssignment"
              name="assignLibrarian_toNonExistentLibrary_failsAssignment()" metainfo="" status="passed">
            <output type="stdout">Librarian 2 assigned to new library 999
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/assignLibrarian_withNonLibrarianUser_failsAssignment"
              name="assignLibrarian_withNonLibrarianUser_failsAssignment()" metainfo="" status="passed">
            <output type="stderr">Librarian not found with ID: 3
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/listAllUsers_whenNoUsersExist_returnsEmptyList"
              name="listAllUsers_whenNoUsersExist_returnsEmptyList()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/deleteUser_withNonExistentUserId_doesNothing"
              name="deleteUser_withNonExistentUserId_doesNothing()" metainfo="" status="passed">
            <output type="stdout">User with ID 999 deleted successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/deleteUser_whenDeletingSelf_doesNotDeleteUser"
              name="deleteUser_whenDeletingSelf_doesNotDeleteUser()" metainfo="" status="passed">
            <output type="stderr">Cannot delete your own admin account.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/listAllUsers_whenUsersExist_returnsListOfUsers"
              name="listAllUsers_whenUsersExist_returnsListOfUsers()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/registerNewLibrarian_whenLibraryDoesNotExist_doesNotRegisterUser"
              name="registerNewLibrarian_whenLibraryDoesNotExist_doesNotRegisterUser()" metainfo="" status="passed">
            <output type="stderr">Cannot register librarian: Library with ID 99 not found.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/deleteUser_whenNotDeletingSelf_deletesUser"
              name="deleteUser_whenNotDeletingSelf_deletesUser()" metainfo="" status="passed">
            <output type="stdout">User with ID 2 deleted successfully.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/registerNewLibrarian_withValidData_registersSuccessfully"
              name="registerNewLibrarian_withValidData_registersSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Librarian 'newlib' registered successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminUsersControllerTest/deleteUser_deletesAnotherUserSuccessfully"
              name="deleteUser_deletesAnotherUserSuccessfully()" metainfo="" status="passed">
            <output type="stdout">User with ID 2 deleted successfully.
            </output>
        </test>
    </suite>
    <suite duration="10" locationUrl="java:suite://dev.ltocca.loanranger.service.BookCopySearchServiceTest"
           name="BookCopySearchServiceTest" status="passed">
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_withQueryShorterThanMinimum_throwsIllegalArgumentException"
              name="search_withQueryShorterThanMinimum_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byIsbn_callsDaoSearchByIsbn"
              name="search_byIsbn_callsDaoSearchByIsbn()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/smartSearch_withIsbnLikeQuery_usesIsbnStrategy"
              name="smartSearch_withIsbnLikeQuery_usesIsbnStrategy()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byIsbn_callsCorrectDaoMethodAndCleansQuery"
              name="search_byIsbn_callsCorrectDaoMethodAndCleansQuery()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_withQueryTooShort_throwsIllegalArgumentException"
              name="search_withQueryTooShort_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byTitle_callsCorrectDaoMethod"
              name="search_byTitle_callsCorrectDaoMethod()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/searchAvailableOnly_filtersOutUnavailableBooks"
              name="searchAvailableOnly_filtersOutUnavailableBooks()" metainfo="" status="passed"/>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/getAllStrategyDescriptions_returnsAllDescriptions"
              name="getAllStrategyDescriptions_returnsAllDescriptions()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byTitle_callsDaoSearchByTitle"
              name="search_byTitle_callsDaoSearchByTitle()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/smartSearch_withAuthorLikeQuery_usesAuthorStrategy"
              name="smartSearch_withAuthorLikeQuery_usesAuthorStrategy()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_withNullQuery_throwsIllegalArgumentException"
              name="search_withNullQuery_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/smartSearch_withIsbnLikeString_callsDaoSearchByIsbn"
              name="smartSearch_withIsbnLikeString_callsDaoSearchByIsbn()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byAuthor_callsDaoSearchByAuthor"
              name="search_byAuthor_callsDaoSearchByAuthor()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/smartSearch_withComplexQuery_usesFullTextSearch"
              name="smartSearch_withComplexQuery_usesFullTextSearch()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/smartSearch_withAuthorLikeString_callsDaoSearchByAuthor"
              name="smartSearch_withAuthorLikeString_callsDaoSearchByAuthor()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_withEmptyQuery_throwsIllegalArgumentException"
              name="search_withEmptyQuery_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.service.BookCopySearchServiceTest/search_byAuthor_callsCorrectDaoMethod"
              name="search_byAuthor_callsCorrectDaoMethod()" metainfo="" status="passed"/>
    </suite>
    <suite duration="80" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest"
           name="LibrarianBookControllerTest" status="passed">
        <test duration="57"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/loanBookToMember_onBookInAnotherLibrary_fails"
              name="loanBookToMember_onBookInAnotherLibrary_fails()" metainfo="" status="passed">
            <output type="stderr">This book copy with id 200 is not in this Library, but it is in Other Library!
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/renewLoan_withInvalidLoanId_fails"
              name="renewLoan_withInvalidLoanId_fails()" metainfo="" status="passed">
            <output type="stderr">Empty loan ID!
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/removeCopyFromMaintenance_onBookInAnotherLibrary_fails"
              name="removeCopyFromMaintenance_onBookInAnotherLibrary_fails()" metainfo="" status="passed">
            <output type="stderr">This book copy with id 200 is not in this Library, but it is in Other Library!
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/putCopyUnderMaintenance_whenCopyNotInCorrectState_fails"
              name="putCopyUnderMaintenance_whenCopyNotInCorrectState_fails()" metainfo="" status="passed">
            <output type="stdout">Book is available. Loaning...
            </output>
            <output type="stderr">Book copy 100 is not available, so it cannot be placed under maintenance.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/getActiveLoans_returnsLoansFromOwnLibrary"
              name="getActiveLoans_returnsLoansFromOwnLibrary()" metainfo="" status="passed"/>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/addBookCopy_forNonExistentBook_failsToCreateCopy"
              name="addBookCopy_forNonExistentBook_failsToCreateCopy()" metainfo="" status="passed">
            <output type="stderr">Failed to add new book copy.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/searchBookCopies_returnsOnlyLocalResults"
              name="searchBookCopies_returnsOnlyLocalResults()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/searchBookCopiesElsewhere_returnsGlobalResults"
              name="searchBookCopiesElsewhere_returnsGlobalResults()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/putCopyUnderMaintenance_onBookInOwnLibrary_succeeds"
              name="putCopyUnderMaintenance_onBookInOwnLibrary_succeeds()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/processReturn_onBookInOwnLibrary_succeeds"
              name="processReturn_onBookInOwnLibrary_succeeds()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/renewLoan_onBookInOwnLibrary_succeeds"
              name="renewLoan_onBookInOwnLibrary_succeeds()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/getAllLoans_returnsAllLoansFromOwnLibrary"
              name="getAllLoans_returnsAllLoansFromOwnLibrary()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/getOverdueLoans_returnsOverdueLoansFromOwnLibrary"
              name="getOverdueLoans_returnsOverdueLoansFromOwnLibrary()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/putCopyUnderMaintenance_onBookInAnotherLibrary_fails"
              name="putCopyUnderMaintenance_onBookInAnotherLibrary_fails()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/loanBookToMember_withInvalidCopyId_fails"
              name="loanBookToMember_withInvalidCopyId_fails()" metainfo="" status="passed">
            <output type="stderr">No copy inserted! Try again.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/processReturn_withInvalidCopyId_fails"
              name="processReturn_withInvalidCopyId_fails()" metainfo="" status="passed">
            <output type="stderr">No book copy found with id 999
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/renewLoan_onBookInAnotherLibrary_fails"
              name="renewLoan_onBookInAnotherLibrary_fails()" metainfo="" status="passed">
            <output type="stderr">This loan with id 60 is has not been processed in this Library, but it is from Other
                Library id: 2!
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/loanBookToMember_withInvalidMemberId_fails"
              name="loanBookToMember_withInvalidMemberId_fails()" metainfo="" status="passed">
            <output type="stderr">The user provided (999) is not a user! try again
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/loanBookToMember_onBookInOwnLibrary_succeeds"
              name="loanBookToMember_onBookInOwnLibrary_succeeds()" metainfo="" status="passed"/>
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/processReturn_onBookInAnotherLibrary_fails"
              name="processReturn_onBookInAnotherLibrary_fails()" metainfo="" status="passed">
            <output type="stderr">This book copy with id 200 is has not been borrowed in this Library, but it is in
                Other Library id: 2!
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/removeCopyFromMaintenance_onBookInOwnLibrary_succeeds"
              name="removeCopyFromMaintenance_onBookInOwnLibrary_succeeds()" metainfo="" status="passed">
            <output type="stdout">Placing book under maintenance.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianBookControllerTest/addBookCopy_forExistingBook_createsCopyInLibrariansLibrary"
              name="addBookCopy_forExistingBook_createsCopyInLibrariansLibrary()" metainfo="" status="passed">
            <output type="stdout">New copy added with ID 100 for book ISBN 978-0123456789.
            </output>
        </test>
    </suite>
    <suite duration="350" locationUrl="java:suite://dev.ltocca.loanranger.ORM.BookDAOTest" name="BookDAOTest"
           status="passed">
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/getAllBooks_ShouldReturnAllBooks"
              name="getAllBooks_ShouldReturnAllBooks()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/getBookByTitle_ShouldReturnBookWhenTitleExists"
              name="getBookByTitle_ShouldReturnBookWhenTitleExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="34"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/deleteBook_ShouldRemoveBookFromDatabase"
              name="deleteBook_ShouldRemoveBookFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/findBookByIsbn_ShouldReturnBooksWithPartialIsbnMatch"
              name="findBookByIsbn_ShouldReturnBooksWithPartialIsbnMatch()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/getBookByIsbn_ShouldReturnBookWhenExists"
              name="getBookByIsbn_ShouldReturnBookWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="34"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/findBooksByPublicationYear_ShouldReturnBooksByYear"
              name="findBooksByPublicationYear_ShouldReturnBooksByYear()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/createBook_ShouldCreateBookSuccessfully"
              name="createBook_ShouldCreateBookSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="33"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/getBookByIsbn_ShouldReturnEmptyWhenBookNotFound"
              name="getBookByIsbn_ShouldReturnEmptyWhenBookNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="34"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/deleteBookByObject_ShouldRemoveBookFromDatabase"
              name="deleteBookByObject_ShouldRemoveBookFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="36"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.BookDAOTest/findBooksByAuthor_ShouldReturnBooksByAuthor"
              name="findBooksByAuthor_ShouldReturnBooksByAuthor()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
    <suite duration="13" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest"
           name="MemberBookControllerTest" status="passed">
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/reserveBookCopy_withNullCopyId_doesNotCallFacade"
              name="reserveBookCopy_withNullCopyId_doesNotCallFacade()" metainfo="" status="passed">
            <output type="stderr">Copy ID is null, cannot reserve.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/borrowBookCopy_withInvalidId_doesNotCallFacade"
              name="borrowBookCopy_withInvalidId_doesNotCallFacade()" metainfo="" status="passed">
            <output type="stderr">There is no copy present with this id 999
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/cancelReservation_withNullReservationId_doesNotCallFacade"
              name="cancelReservation_withNullReservationId_doesNotCallFacade()" metainfo="" status="passed">
            <output type="stderr">Reservation ID cannot be null.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/searchBooksByAuthor_callsSearchService"
              name="searchBooksByAuthor_callsSearchService()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/borrowBookCopy_withValidId_callsFacade"
              name="borrowBookCopy_withValidId_callsFacade()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/searchBooksByType_withTitle_callsTitleSearch"
              name="searchBooksByType_withTitle_callsTitleSearch()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/borrowBookCopy_withBookCopyObject_callsFacade"
              name="borrowBookCopy_withBookCopyObject_callsFacade()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/searchBookCopyGeneric_callsSearchService"
              name="searchBookCopyGeneric_callsSearchService()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/cancelReservation_callsFacade"
              name="cancelReservation_callsFacade()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/returnCopy_withNullCopyId_doesNotCallFacade"
              name="returnCopy_withNullCopyId_doesNotCallFacade()" metainfo="" status="passed">
            <output type="stderr">Copy id is null, cannot borrow.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/getAllLoans_callsLoanDAO"
              name="getAllLoans_callsLoanDAO()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/getOverdueLoans_callsLoanDAO"
              name="getOverdueLoans_callsLoanDAO()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/getActiveLoans_callsLoanDAO"
              name="getActiveLoans_callsLoanDAO()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/getActiveReservations_returnsPendingReservations"
              name="getActiveReservations_returnsPendingReservations()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/searchBooksByIsbn_callsSearchService"
              name="searchBooksByIsbn_callsSearchService()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/searchBooksByTitle_callsSearchService"
              name="searchBooksByTitle_callsSearchService()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/returnCopy_callsFacade"
              name="returnCopy_callsFacade()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/reserveBookCopy_withBookCopyObject_callsFacade"
              name="reserveBookCopy_withBookCopyObject_callsFacade()" metainfo="" status="passed">
            <output type="stdout">Reservation successful for book copy ID 100
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/reserveBookCopy_withValidCopyId_callsFacade"
              name="reserveBookCopy_withValidCopyId_callsFacade()" metainfo="" status="passed">
            <output type="stdout">Reservation successful for book copy ID 100
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/borrowBookCopy_withNullBookCopy_doesNotCallFacade"
              name="borrowBookCopy_withNullBookCopy_doesNotCallFacade()" metainfo="" status="passed">
            <output type="stderr">BookCopy is null, cannot borrow.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberBookControllerTest/getAllReservations_callsFacade"
              name="getAllReservations_callsFacade()" metainfo="" status="passed"/>
    </suite>
    <suite duration="554" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.UserFactoryTest"
           name="UserFactoryTest" status="passed">
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withInvalidRole_throwsIllegalArgumentException"
              name="createUser_withInvalidRole_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withEmptyPassword_hashesEmptyPassword"
              name="createUser_withEmptyPassword_hashesEmptyPassword()" metainfo="" status="passed"/>
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withMemberRole_returnsMemberInstance"
              name="createUser_withMemberRole_returnsMemberInstance()" metainfo="" status="passed"/>
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withAdminRole_returnsAdminInstance"
              name="createUser_withAdminRole_returnsAdminInstance()" metainfo="" status="passed"/>
        <test duration="56"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withLibrarianRoleAndNullLibrary_throwsIllegalArgumentException"
              name="createUser_withLibrarianRoleAndNullLibrary_throwsIllegalArgumentException()" metainfo=""
              status="passed"/>
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withLibrarianRoleAndLibrary_returnsLibrarianInstance"
              name="createUser_withLibrarianRoleAndLibrary_returnsLibrarianInstance()" metainfo="" status="passed"/>
        <test duration="111"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_hashesPassword"
              name="createUser_hashesPassword()" metainfo="" status="passed"/>
        <test duration="55"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_trimsInputFields"
              name="createUser_trimsInputFields()" metainfo="" status="passed"/>
        <test duration="56"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.UserFactoryTest/createUser_withLibrarianRoleAndLibraryWithoutId_throwsIllegalArgumentException"
              name="createUser_withLibrarianRoleAndLibraryWithoutId_throwsIllegalArgumentException()" metainfo=""
              status="passed"/>
    </suite>
    <suite duration="33" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest"
           name="AdminBookControllerTest" status="passed">
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/listAllBooks_whenNoItemsExist_returnsEmptyList"
              name="listAllBooks_whenNoItemsExist_returnsEmptyList()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/updateLibrary_withEmptyFields_doesNotUpdateThoseFields"
              name="updateLibrary_withEmptyFields_doesNotUpdateThoseFields()" metainfo="" status="passed">
            <output type="stdout">Library Old Name's information updated successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/listAllLibraries_whenItemsExist_returnsListOfItems"
              name="listAllLibraries_whenItemsExist_returnsListOfItems()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addLibrary_withValidData_createsLibrarySuccessfully"
              name="addLibrary_withValidData_createsLibrarySuccessfully()" metainfo="" status="passed">
            <output type="stdout">Library 'New Library' added successfully with ID null
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/removeBook_withNonExistentIsbn_doesNothing"
              name="removeBook_withNonExistentIsbn_doesNothing()" metainfo="" status="passed">
            <output type="stderr">Error: No book found with ISBN 999-0123456789
            </output>
        </test>
        <test duration="28"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/removeBook_whenBookHasCopies_doesNotDeleteBook"
              name="removeBook_whenBookHasCopies_doesNotDeleteBook()" metainfo="" status="passed">
            <output type="stderr">Error: Cannot remove book 'Test Book' because there are 1 copies in the system.
                Please remove all copies first before deleting the book.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/updateLibrary_withNonExistentId_throwsException"
              name="updateLibrary_withNonExistentId_throwsException()" metainfo="" status="passed">
            <output type="stderr">Error updating library: Library with ID 999 not found.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addBook_withNullIsbn_throwsIllegalArgumentException"
              name="addBook_withNullIsbn_throwsIllegalArgumentException()" metainfo="" status="passed">
            <output type="stderr">Error adding book: ISBN cannot be null or empty
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addBook_whenIsbnExists_doesNotCreateBook"
              name="addBook_whenIsbnExists_doesNotCreateBook()" metainfo="" status="passed">
            <output type="stderr">Error: A book with ISBN 978-0123456789 already exists.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/updateLibrary_updatesOnlyOneFieldSuccessfully"
              name="updateLibrary_updatesOnlyOneFieldSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Library New Name's information updated successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/listAllLibraries_whenNoItemsExist_returnsEmptyList"
              name="listAllLibraries_whenNoItemsExist_returnsEmptyList()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/removeBook_withNoCopies_deletesBookSuccessfully"
              name="removeBook_withNoCopies_deletesBookSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Book 'Test Book' with ISBN 978-0123456789 removed successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addBook_withNullTitle_throwsIllegalArgumentException"
              name="addBook_withNullTitle_throwsIllegalArgumentException()" metainfo="" status="passed">
            <output type="stderr">Error adding book: Title cannot be null or empty
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/updateLibrary_updatesAllFieldsSuccessfully"
              name="updateLibrary_updatesAllFieldsSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Library New Name's information updated successfully.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/listAllBooks_whenItemsExist_returnsListOfItems"
              name="listAllBooks_whenItemsExist_returnsListOfItems()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addBook_withOnlyRequiredFields_createsBookSuccessfully"
              name="addBook_withOnlyRequiredFields_createsBookSuccessfully()" metainfo="" status="passed">
            <output type="stderr">Error adding book: Cannot invoke "dev.ltocca.loanranger.domainModel.Book.getIsbn()"
                because "createdBook" is null
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.AdminBookControllerTest/addBook_withAllFields_createsBookSuccessfully"
              name="addBook_withAllFields_createsBookSuccessfully()" metainfo="" status="passed">
            <output type="stderr">Error adding book: Cannot invoke "dev.ltocca.loanranger.domainModel.Book.getIsbn()"
                because "createdBook" is null
            </output>
        </test>
    </suite>
    <suite duration="169" locationUrl="java:suite://dev.ltocca.loanranger.service.EmailServiceTest"
           name="EmailServiceTest" status="passed">
        <test duration="74"
              locationUrl="java:test://dev.ltocca.loanranger.service.EmailServiceTest/sendEmail_whenEnabled_callsMailSender"
              name="sendEmail_whenEnabled_callsMailSender()" metainfo="" status="passed">
            <output type="stdout">Email sent successfully to: recipient@example.com
            </output>
        </test>
        <test duration="3"
              locationUrl="java:test://dev.ltocca.loanranger.service.EmailServiceTest/sendEmail_whenMailSenderThrowsException_logsError"
              name="sendEmail_whenMailSenderThrowsException_logsError()" metainfo="" status="passed">
            <output type="stderr">Failed to send email to recipient@example.com: SMTP error
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.EmailServiceTest/sendEmail_whenMessagingExceptionOccurs_logsError"
              name="sendEmail_whenMessagingExceptionOccurs_logsError()" metainfo="" status="passed">
            <output type="stderr">Failed to send email to me@mail.ltocca.dev: Messaging exception
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.service.EmailServiceTest/sendEmail_whenDisabled_doesNotCallMailSender"
              name="sendEmail_whenDisabled_doesNotCallMailSender()" metainfo="" status="passed">
            <output type="stdout">Mock email (sending disabled):
                To: recipient@example.com
                Subject: Test Subject
                Body: Test Body
            </output>
        </test>
        <test duration="92"
              locationUrl="java:test://dev.ltocca.loanranger.service.EmailServiceTest/sendEmail_shouldSendAndReceiveMessageSuccessfully"
              name="sendEmail_shouldSendAndReceiveMessageSuccessfully()" metainfo="" status="passed">
            <output type="stdout">2025-10-13T15:29:14.867+02:00 INFO 5991 --- [LoanRanger] [127.0.0.1:50812]
                c.icegreen.greenmail.user.UserManager : Created user login recipient@example.com for address
                recipient@example.com with password recipient@example.com because it didn't exist before.
                Email sent successfully to: recipient@example.com
            </output>
        </test>
    </suite>
    <suite duration="83" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.LoginControllerTest"
           name="LoginControllerTest" status="passed">
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LoginControllerTest/register_withInvalidEmail_shouldThrowException"
              name="register_withInvalidEmail_shouldThrowException()" metainfo="" status="passed"/>
        <test duration="57"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LoginControllerTest/register_withValidMemberData_shouldCreateAndReturnUser"
              name="register_withValidMemberData_shouldCreateAndReturnUser()" metainfo="" status="passed"/>
        <test duration="26"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LoginControllerTest/login_withValidCredentials_shouldReturnUser"
              name="login_withValidCredentials_shouldReturnUser()" metainfo="" status="passed">
            <output type="stdout">Login successful: welcome Test User!
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LoginControllerTest/login_withInvalidPassword_shouldReturnEmpty"
              name="login_withInvalidPassword_shouldReturnEmpty()" metainfo="" status="passed">
            <output type="stderr">Login error: Invalid password!
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LoginControllerTest/register_librarianWithoutLibrary_shouldThrowException"
              name="register_librarianWithoutLibrary_shouldThrowException()" metainfo="" status="passed"/>
    </suite>
    <suite duration="583" locationUrl="java:suite://dev.ltocca.loanranger.ORM.LoanDAOTest" name="LoanDAOTest"
           status="passed">
        <test duration="43"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/findOverdueLoans_ShouldReturnOnlyOverdueLoans"
              name="findOverdueLoans_ShouldReturnOnlyOverdueLoans()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/findActiveLoansByMember_ShouldReturnOnlyActiveLoans"
              name="findActiveLoansByMember_ShouldReturnOnlyActiveLoans()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/findLoansByMember_ShouldReturnAllMemberLoans"
              name="findLoansByMember_ShouldReturnAllMemberLoans()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/deleteLoan_ShouldRemoveLoanFromDatabase"
              name="deleteLoan_ShouldRemoveLoanFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/updateDueDate_WithDays_ShouldExtendDueDate"
              name="updateDueDate_WithDays_ShouldExtendDueDate()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/updateDueDate_WithDate_ShouldUpdateDueDate"
              name="updateDueDate_WithDate_ShouldUpdateDueDate()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/createLoan_WithLoanObject_ShouldCreateLoanSuccessfully"
              name="createLoan_WithLoanObject_ShouldCreateLoanSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/getLoanById_ShouldReturnLoanWhenExists"
              name="getLoanById_ShouldReturnLoanWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/findActiveLoansByLibrary_ShouldReturnActiveLoansForLibrary"
              name="findActiveLoansByLibrary_ShouldReturnActiveLoansForLibrary()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/createLoan_WithBookCopyAndMember_ShouldCreateLoanSuccessfully"
              name="createLoan_WithBookCopyAndMember_ShouldCreateLoanSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/getLoanByBookCopyId_ShouldReturnLoanWhenExists"
              name="getLoanByBookCopyId_ShouldReturnLoanWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/updateLoan_ShouldUpdateLoanInformation"
              name="updateLoan_ShouldUpdateLoanInformation()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/getLoanById_ShouldReturnEmptyWhenLoanNotFound"
              name="getLoanById_ShouldReturnEmptyWhenLoanNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/findMemberOverdueLoans_ShouldReturnOverdueLoansForMember"
              name="findMemberOverdueLoans_ShouldReturnOverdueLoansForMember()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.LoanDAOTest/getLoanByBookCopy_ShouldReturnLoanWhenExists"
              name="getLoanByBookCopy_ShouldReturnLoanWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
    <suite duration="12" locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest"
           name="MemberAccountControllerTest" status="passed">
        <test duration="2"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changePassword_withIncorrectCurrentPassword_throwsIllegalArgumentException"
              name="changePassword_withIncorrectCurrentPassword_throwsIllegalArgumentException()" metainfo=""
              status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeUsername_withTakenUsername_throwsIllegalArgumentException"
              name="changeUsername_withTakenUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changePassword_withSamePassword_throwsIllegalArgumentException"
              name="changePassword_withSamePassword_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeEmail_withInvalidFormat_throwsIllegalArgumentException"
              name="changeEmail_withInvalidFormat_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/deleteAccount_withCorrectPasswordAndNoDependencies_succeeds"
              name="deleteAccount_withCorrectPasswordAndNoDependencies_succeeds()" metainfo="" status="passed">
            <output type="stderr">Account has been deleted.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/deleteAccount_withPendingReservations_fails"
              name="deleteAccount_withPendingReservations_fails()" metainfo="" status="passed">
            <output type="stderr">Account cannot be deleted. You have pending reservations. Please cancel them first.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/deleteAccount_withActiveLoans_fails"
              name="deleteAccount_withActiveLoans_fails()" metainfo="" status="passed">
            <output type="stderr">Account cannot be deleted. You have active loans.
            </output>
        </test>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeEmail_withValidNewEmail_updatesSuccessfully"
              name="changeEmail_withValidNewEmail_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changePassword_withShortNewPassword_throwsIllegalArgumentException"
              name="changePassword_withShortNewPassword_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeUsername_withNullUsername_throwsIllegalArgumentException"
              name="changeUsername_withNullUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeUsername_withSameUsername_throwsIllegalArgumentException"
              name="changeUsername_withSameUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeEmail_withSameEmail_throwsIllegalArgumentException"
              name="changeEmail_withSameEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/deleteAccount_withIncorrectPassword_fails"
              name="deleteAccount_withIncorrectPassword_fails()" metainfo="" status="passed">
            <output type="stderr">Incorrect password
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/deleteAccount_withCancelledReservations_succeeds"
              name="deleteAccount_withCancelledReservations_succeeds()" metainfo="" status="passed">
            <output type="stderr">Account has been deleted.
            </output>
        </test>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeUsername_withValidNewUsername_updatesSuccessfully"
              name="changeUsername_withValidNewUsername_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeEmail_withNullEmail_throwsIllegalArgumentException"
              name="changeEmail_withNullEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changeEmail_withTakenEmail_throwsIllegalArgumentException"
              name="changeEmail_withTakenEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test duration="1"
              locationUrl="java:test://dev.ltocca.loanranger.businessLogic.MemberAccountControllerTest/changePassword_withValidCredentials_updatesSuccessfully"
              name="changePassword_withValidCredentials_updatesSuccessfully()" metainfo="" status="passed"/>
    </suite>
    <suite locationUrl="java:suite://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest"
           name="LibrarianAccountControllerTest" status="passed">
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changePassword_withIncorrectCurrentPassword_throwsIllegalArgumentException"
              name="changePassword_withIncorrectCurrentPassword_throwsIllegalArgumentException()" metainfo=""
              status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_withTakenUsername_throwsIllegalArgumentException"
              name="changeUsername_withTakenUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changePassword_withSamePassword_throwsIllegalArgumentException"
              name="changePassword_withSamePassword_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeEmail_withInvalidFormat_throwsIllegalArgumentException"
              name="changeEmail_withInvalidFormat_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changePassword_withCorrectCurrentPassword_updatesSuccessfully"
              name="changePassword_withCorrectCurrentPassword_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeEmail_withValidNewEmail_updatesSuccessfully"
              name="changeEmail_withValidNewEmail_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changePassword_withShortNewPassword_throwsIllegalArgumentException"
              name="changePassword_withShortNewPassword_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_withNullUsername_throwsIllegalArgumentException"
              name="changeUsername_withNullUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_whenUsernameIsAvailable_updatesSuccessfully"
              name="changeUsername_whenUsernameIsAvailable_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_withSameUsername_throwsIllegalArgumentException"
              name="changeUsername_withSameUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeEmail_withSameEmail_throwsIllegalArgumentException"
              name="changeEmail_withSameEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_whenUsernameIsTaken_throwsIllegalArgumentException"
              name="changeUsername_whenUsernameIsTaken_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_withEmptyUsername_throwsIllegalArgumentException"
              name="changeUsername_withEmptyUsername_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeUsername_withValidNewUsername_updatesSuccessfully"
              name="changeUsername_withValidNewUsername_updatesSuccessfully()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeEmail_withNullEmail_throwsIllegalArgumentException"
              name="changeEmail_withNullEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changeEmail_withTakenEmail_throwsIllegalArgumentException"
              name="changeEmail_withTakenEmail_throwsIllegalArgumentException()" metainfo="" status="passed"/>
        <test locationUrl="java:test://dev.ltocca.loanranger.businessLogic.LibrarianAccountControllerTest/changePassword_withValidCredentials_updatesSuccessfully"
              name="changePassword_withValidCredentials_updatesSuccessfully()" metainfo="" status="passed"/>
    </suite>
    <suite duration="1594" locationUrl="java:suite://dev.ltocca.loanranger.presentationLayer.MainCLITest"
           name="MainCLITest" status="passed">
        <test duration="170"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_basicMemberRegistrationAndLogin_succeeds"
              name="cli_basicMemberRegistrationAndLogin_succeeds()" metainfo="" status="passed">
            <output type="stdout">2025-10-13T15:29:17.105+02:00 INFO 5991 --- [LoanRanger] [ main]
                com.zaxxer.hikari.HikariDataSource : HikariPool-2 - Starting...
                2025-10-13T15:29:17.118+02:00 INFO 5991 --- [LoanRanger] [ main] com.zaxxer.hikari.pool.HikariPool :
                HikariPool-2 - Added connection org.postgresql.jdbc.PgConnection@541c76fd
                2025-10-13T15:29:17.119+02:00 INFO 5991 --- [LoanRanger] [ main] com.zaxxer.hikari.HikariDataSource :
                HikariPool-2 - Start completed.
                Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="103"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_memberReserveBook_succeeds"
              name="cli_memberReserveBook_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="94"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_memberViewAllLoans_succeeds"
              name="cli_memberViewAllLoans_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="95"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_memberViewReservations_succeeds"
              name="cli_memberViewReservations_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="96"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_adminViewBookDetails_succeeds"
              name="cli_adminViewBookDetails_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="96"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_librarianAddBookCopy_succeeds"
              name="cli_librarianAddBookCopy_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="93"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_properLogoutReturnsToMainMenu"
              name="cli_properLogoutReturnsToMainMenu()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="98"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_adminListAllBooks_succeeds"
              name="cli_adminListAllBooks_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="97"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_adminFullLibraryLifecycle_succeeds"
              name="cli_adminFullLibraryLifecycle_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="95"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_memberSearchAndViewBooks_succeeds"
              name="cli_memberSearchAndViewBooks_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="93"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_adminListAllUsers_succeeds"
              name="cli_adminListAllUsers_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="35"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_loginWithNonExistentEmail_showsErrorMessage"
              name="cli_loginWithNonExistentEmail_showsErrorMessage()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="94"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_adminAddNewBook_succeeds"
              name="cli_adminAddNewBook_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="93"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_registerWithAlreadyTakenEmail_showsErrorMessage"
              name="cli_registerWithAlreadyTakenEmail_showsErrorMessage()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="148"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_memberChangePassword_withIncorrectCurrentPassword_fails"
              name="cli_memberChangePassword_withIncorrectCurrentPassword_fails()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
        <test duration="94"
              locationUrl="java:test://dev.ltocca.loanranger.presentationLayer.MainCLITest/cli_librarianLoginAndViewLoans_succeeds"
              name="cli_librarianLoginAndViewLoans_succeeds()" metainfo="" status="passed">
            <output type="stdout">Executing database reset...
                Database schema has been recreated successfully with a default admin.
                Generating default database...
                Default database generated successfully.
            </output>
        </test>
    </suite>
    <suite duration="501" locationUrl="java:suite://dev.ltocca.loanranger.ORM.ReservationDAOTest"
           name="ReservationDAOTest" status="passed">
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/getReservationMemberBook_ShouldReturnReservationWhenExists"
              name="getReservationMemberBook_ShouldReturnReservationWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/getReservationById_ShouldReturnReservationWhenExists"
              name="getReservationById_ShouldReturnReservationWhenExists()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/findCopyWaitingReservation_ShouldReturnOnlyWaitingReservations"
              name="findCopyWaitingReservation_ShouldReturnOnlyWaitingReservations()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/findCopyPendingReservation_ShouldReturnOnlyPendingReservations"
              name="findCopyPendingReservation_ShouldReturnOnlyPendingReservations()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/updateStatus_ShouldUpdateReservationStatus"
              name="updateStatus_ShouldUpdateReservationStatus()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/findCopyReservation_ShouldReturnAllReservationsForCopy"
              name="findCopyReservation_ShouldReturnAllReservationsForCopy()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/updateReservation_ShouldUpdateReservationInformation"
              name="updateReservation_ShouldUpdateReservationInformation()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="40"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/findMemberReservations_ShouldReturnAllMemberReservations"
              name="findMemberReservations_ShouldReturnAllMemberReservations()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/deleteReservation_ShouldRemoveReservationFromDatabase"
              name="deleteReservation_ShouldRemoveReservationFromDatabase()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="37"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/getReservationById_ShouldReturnEmptyWhenReservationNotFound"
              name="getReservationById_ShouldReturnEmptyWhenReservationNotFound()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/createReservation_ShouldCreateReservationSuccessfully"
              name="createReservation_ShouldCreateReservationSuccessfully()" metainfo="" status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="38"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/hasOtherPendingReservations_ShouldReturnFalseWhenNoOtherPendingReservations"
              name="hasOtherPendingReservations_ShouldReturnFalseWhenNoOtherPendingReservations()" metainfo=""
              status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
        <test duration="39"
              locationUrl="java:test://dev.ltocca.loanranger.ORM.ReservationDAOTest/hasOtherPendingReservations_ShouldReturnTrueWhenOtherPendingReservationsExist"
              name="hasOtherPendingReservations_ShouldReturnTrueWhenOtherPendingReservationsExist()" metainfo=""
              status="passed">
            <output type="stdout">Schema loaded successfully using the main test DataSource.
            </output>
        </test>
    </suite>
</testrun>
